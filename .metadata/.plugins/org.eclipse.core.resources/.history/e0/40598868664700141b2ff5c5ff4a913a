import java.util.Scanner;


	/**
	 *  
	 *
	 *  @author Ankita Koratkar
	 *  @version September 23 2014
	 */

	public class ScrappleJr {
		public int [] scores = {1, 3, 3, 2, 1, 4, 2, 4, 1, 8, 5, 1, 3, 1, 1, 3, 10,
						 1, 1, 1, 1, 4, 4, 8, 4, 10};
		private String tilesRemaining = "AAAAAAAAAABBCCDDDDEEEEEEEEEEEEEFFGGGHHIIIIIIIII" +
						"JKLLLLMMNNNNNNOOOOOOOOPPQRRRRRRSSSSTTTTTTUUUUVVWWXYYZ";
		int PlayerScore = 0;
		int ComputerScore = 0;	
		String letters_selectedUser = "";
		String letters_selectedComp = "";	
		int NUMTILES = 8;
		String userWord ="";
		String compWord = "";
		
		public static void main(String [] args) {
			ScrappleJr sj = new ScrappleJr();
			System.out.println("Entering the game");
			sj.oneGame();
		}
		
		public void oneGame() {
			boolean userTurn = true;
			boolean endOfGame = false;
			
			printIntroduction();
			
			while (! endOfGame) {
			
			    //User's Turn
				if (userTurn) {
					
					//Output Tiles remaining
					PrintTilesRemaining(tilesRemaining);
					
					//Print the score of the players
					PrintScore(PlayerScore, ComputerScore);
					System.out.println("Starting letter selection");
					
					//Select the letters for the User and the Computer
					letters_selectedUser = LetterSelection(tilesRemaining, userWord, letters_selectedUser);
					letters_selectedComp =  LetterSelection(tilesRemaining, compWord, letters_selectedComp); 
					
					//Print the letters chosen
					PrintLetter(letters_selectedUser, letters_selectedComp);
					
					//Ask for the word
					userWord = getInput();
					
					//Check if word exists in the file
					boolean check = WordCheck(userWord);
					if(check==false) break;
                    
					//Remove tiles used
					tilesRemaining = ChangeString(tilesRemaining, userWord);
					
					// Show tiles remaining
					PrintTilesRemaining(tilesRemaining);
			
			        ///Calculate the Score
					PlayerScore = ScoreCalculation(userWord, scores);
					
					//Show the score
					PrintScore(PlayerScore, ComputerScore);
					
					//Get tiles for User
					letters_selectedUser = LetterSelection(tilesRemaining, userWord, letters_selectedUser);
				
			
				}
				// Computer's turn
				else {
					
					String []Allwords = null;
					//Show Tiles in your hand and computers hand
					PrintLetter(letters_selectedUser, letters_selectedComp);
					 
					//Its the computers turn : Hit enter
					Prompt.getString("It's the computer's turn. Hit ENTER on the keyboard to continue");
					
					//Find best word that can be made by the letters.
					Allwords = findAllWords(letters_selectedComp);
					
					if(Allwords == null) break;
					
					compWord = bestWord(Allwords,scores);
					//Show word chosen by computer
					System.out.println("The computer chose:" + compWord);
					
					//Take out letters from the string
					tilesRemaining = ChangeString(tilesRemaining, compWord);
					
					//Calculate tiles in Computers hand
					letters_selectedComp =  LetterSelection(tilesRemaining, compWord, letters_selectedComp);
			
				}
				userTurn = ! userTurn;
			}
			
			//Print ending of the game
			System.out.println("No more words can be created.");
			System.out.println();
			System.out.println();
			PrintScore(PlayerScore, ComputerScore);
			System.out.println();
			System.out.println("Thank you for playing ScrappleJr!");
			
			
		}
		
		/**
		 *  Print the introduction screen for Scrapple.
		 */
		public void printIntroduction() {
			System.out.print(" _______     _______     ______     ______    ");
			System.out.println(" ______    ______   __          _______");
			System.out.print("/\\   ___\\   /\\  ____\\   /\\  == \\   /\\  __ \\   ");
			System.out.println("/\\  == \\  /\\  == \\ /\\ \\        /\\  ____\\");
			System.out.print("\\ \\___   \\  \\ \\ \\____   \\ \\  __<   \\ \\  __ \\  ");
			System.out.println("\\ \\  _-/  \\ \\  _-/ \\ \\ \\_____  \\ \\  __\\");
			System.out.print(" \\/\\______\\  \\ \\______\\  \\ \\_\\ \\_\\  \\ \\_\\ \\_\\ ");
			System.out.println(" \\ \\_\\     \\ \\_\\    \\ \\______\\  \\ \\______\\");
			System.out.print("  \\/______/   \\/______/   \\/_/ /_/   \\/_/\\/_/ ");
			System.out.println("  \\/_/      \\/_/     \\/______/   \\/______/ TM");
			System.out.println();
			System.out.print("This game is a \"scaled down\" version of Scrabble. ");
			System.out.println("The game starts with a pool of letter tiles, with");
			System.out.println("the following group of 100 tiles:\n");
			
			for (int i = 0; i < tilesRemaining.length(); i ++) {
				System.out.printf("%c ", tilesRemaining.charAt(i));
				if (i == 49) System.out.println();
			}
			System.out.println("\n");
			System.out.printf("The game starts with %d tiles being chosen at ran", NUMTILES);
			System.out.println("dom to fill the player's hand. The player must");
			System.out.printf("then create a valid word, with a length from 4 to %d ", NUMTILES);
			System.out.println("letters, from the tiles in his/her hand. The");
			System.out.print("\"word\" entered by the player is then checked. It is first ");
			System.out.println("checked for length, then checked to make ");
			System.out.print(" sure it is made up of letters from the letters in the current hand, ");
			System.out.println("and then it is checked against");
			System.out.print("the word text file. If any of these tests fail, the game");
			System.out.println(" terminates. If the word is valid, points");
			System.out.print("are added to the player's score according to the following table ");
			System.out.println("(These scores are taken from the");
			System.out.println("game of Scrabble):");
			
			// Print line of letter scores
			char c = 'A';
			for (int i = 0; i < 26; i++) {
				System.out.printf("%3c", c);
				c = (char)(c + 1);
			}
			System.out.println();
			for (int i = 0; i < scores.length; i++) System.out.printf("%3d", scores[i]);
			System.out.println("\n");
			
			System.out.print("Once the player's score has been updated, more tiles are ");
			System.out.println("chosen at random from the remaining pool");
			System.out.printf("of letters, to fill the player's hand to %d letters. ", NUMTILES);
			System.out.println("The player again creates a word, and the process");
			System.out.print("continues. The game ends when the player enters an invalid ");
			System.out.println("word, or the letters in the pool and");
			System.out.println("player's hand run out. Ready? Let's play!\n");
			
			Prompt.getString("HIT ENTER on the keyboard to continue:");

		}
		
		 /**
		 *  Calculate the score
		 */
		 
		 public int ScoreCalculation(String word, int scoretable[]){
			 
			 {
					int s = 0;
					int ASCII = 0;
					for(int i = 0;i<word.length();i++){
						char c = word.charAt(i);
						if(Character.isUpperCase(c)){
							ASCII = (int)c - 65;}
						if(Character.isLowerCase(c)){
							ASCII = (int)c-97;}
						s = s + scoretable[ASCII];
					}
					return s;
									

				}
		 }
		 
		 /**
		 *  Calculate no of char remaining
		 */
		 
		 
		 public String LetterSelection(String Alltiles, String word, String tiles){
			 
			 //Letter selection for the first time
			 if(word ==""){
				 
			 int randomIndex = 0;
			 int randomIndexCheck[] = new int[8];
			 for(int i =0; i<8;i++){
				 
				 randomIndex = 1 +(int)(Alltiles.length()*Math.random());
				 randomIndexCheck[i] = randomIndex;
			 }
			 
			 //To check that no indices are repeated
			 //for(int i = 0;i<7;i++){
				 
				 //if(randomIndexCheck[i] == randomIndexCheck[i+1]){
					 //randomIndexCheck[i+1] = 1+ (int)(Alltiles.length()*Math.random());
				 //}
			 //}
			 
			 //Getting the letter
			 for(int i = 0; i<8;i++){
				 
				tiles = tiles + Alltiles.charAt(randomIndexCheck[i]);
			}
			 }
			 else{
				 
				 int length = word.length();
				 for(int i = 0; i<length;i++){
					 int lastindex = tiles.lastIndexOf(word.charAt(i));
					 char c = tiles.charAt(lastindex);
					 char temp = c;
					 c = tiles.charAt(1+(int)(Alltiles.length()*Math.random()));
					 
				 }
				 
			 }
				 
			return tiles;	 
		 }
		 
		/**
		 *  Print char remaining
		 */
		 public void PrintTilesRemaining(String tiles){
			 
		     System.out.println("The tiles remaining are:");
		     for(int i = 0; i<tiles.length();i++){
		    	 if(i%19==0){
		    		 System.out.println();
		    	 }
		    	 System.out.print(" " + tiles.charAt(i));
		     }
		     System.out.println();
			 
		 }
		 
		 /**
		 *  Deleting used characters
		 */
		public String ChangeString(String tiles , String word){
			 
			 int tiles_length = tiles.length();
			 String tiles2 = "";
			 int length = word.length();
			 int index[] = new int [length];
			 for(int i = 0; i < length; i++){
				 
				 //To remove the character from a string
				int LastIndex = tiles.lastIndexOf(word.charAt(i));
				index[i] = LastIndex;
				}
			 
			 for(int i = 0; i<length;i++){
				 
				 for(int j = 0;j<tiles_length;j++){
					 if(j == index[i]){
						 tiles2 = tiles2+"";
					 }
					 else
						 tiles2 = tiles2 + tiles2.charAt(j);
						 
				 }
				 
			 }
			  return tiles2;
		}
		
		/**
		 *  Printing Scores
		 */		
		 
		 public void PrintScore(int uscore, int cscore){
			 
			System.out.println("Player Score:     " +uscore);
			System.out.println("Computer Score:   " +cscore);
		}
		
		public void PrintLetter (String letter1, String letter2){
			
			System.out.printf("THE TILES IN YOUR HAND ARE: " + letter1);
			System.out.println();
			System.out.printf("THE TILES IN THE COMPUTER HAND ARE : " +letter2);
			System.out.println();
		}
		
		/**
		 *  Enter a list of 3 to 12 letters. It also checks
		 *  all letters to insure they fall between 'a' and 'z'.
		 *
		 *  @return  A string of the letters
		 */
		public static String getInput ( )
		{
			String letters ="";
			boolean done;
			do
			{
				done = true;
				letters = Prompt.getString("Please enter a word created from your current set of tiles ->");
				if(letters.length()<4||letters.length() >8){
				done = false;}
			
			//check each letter
			
			for(int cnt = 0;cnt<letters.length();cnt++){
				char c = letters.charAt(cnt);
				if(c<'A' || c>'Z'){ 
				done = false;}
				}
		    }
		
		while(!done);
		return letters;
			
		}
		
		public boolean WordCheck(String wordgiven){
			
			//returns false if word is not found to end the game
			boolean found = false;
			String word;
			Scanner infile = OpenFile.openToRead("wordlist.txt.html");
			while(infile.hasNext()){
				word = infile.next();
				if(word.equalsIgnoreCase(wordgiven)){
					found = true;	
				}
			}
					
			return found;		
		}
		
		/**
		 *  Find all words that can be formed by a list of letters.
		 *
		 *  @param letters  String list of letters
		 *  @return   An array of strings with all words found.
		 */
		public String [] findAllWords (String letters)
		{		
	        String word;
	        String [] words = new String[1000];
	        int count = 0;
			Scanner infile = OpenFile.openToRead("wordlist.txt");
			while(infile.hasNext()){
				word = infile.next();
				int len = word.length();
				if(matchletters(word, letters))
				   words[count++] = word;
			   }
			   String [] found = new String[count];
			   for(int i =0; i<count;i++){
				   found[i]=words[i];
			   }
			   return found;
		}
		
		/**
		 *  Determines if a word can be formed by a list of letters.
		 *
		 *  @param temp  The word to be tested.
		 *  @param letters  A string of the list of letter
		 *  @return   True if word can be formed, false otherwise
		 */
		public  boolean matchletters (String word, String letters)
		{
			for(int i=0;i<word.length();i++){
	                int ind = letters.indexOf(word.charAt(i));
	                if(ind == -1)
	                        return false;
	                letters = letters.substring(0,ind) + letters.substring(ind+1);
	        }
	        return true;

		}
		
		/**
		 *  Finds the highest scoring word according to Scrabble rules.
		 *
		 *  @param word  An array of words to check.
		 *  @param scoretable  An array of 26 integer scores in letter order.
		 *  @return   The word with the highest score.
		 */
		public String bestWord (String [] word, int [] scoretable)
		{
			String MaxScoreWord = "";
			int max = 0;
			for(int i = 0;i< word.length;i++){
				int score = ScoreCalculation(word[i], scoretable);
				if(max<score){
					MaxScoreWord = word[i];
				}	
			}
			return MaxScoreWord;
	    } 
		 
	}


